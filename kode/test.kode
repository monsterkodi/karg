
noon = require 'noon'
process = require 'process'
process.argv = process.argv.concat ['--no-colors']
{ kolor } = require 'klor'
krg = require '../' 

▸ karg

    # 000   000  000   000  00     00  0000000    00000000  00000000   
    # 0000  000  000   000  000   000  000   000  000       000   000  
    # 000 0 000  000   000  000000000  0000000    0000000   0000000    
    # 000  0000  000   000  000 0 000  000   000  000       000   000  
    # 000   000   0000000   000   000  0000000    00000000  000   000  
    
    ▸ number
        
        krg """
            test
                float    . = 123.567
            """ argv:[] ▸
            float:123.567
        
        krg """
            test
                float    . = 0.0
            """ argv:[] ▸
            float:0

        krg """
            test
                float  . help text . = 123.567
            """ argv:[] ▸
            float:123.567

        krg """
            test
                float  . = 123.567
            """ argv:'-f 666.7'.split ' ' ▸
            float:666.7
        
        krg """
            test
                float  . = 123.5
            """ argv:'--float 777.6'.split ' ' ▸
            float:777.6
    
        krg """
            test
                int    . = 123
            """ argv:[] ▸
            int:123
        
        krg """
            test
                int    . = 0
            """ argv:[] ▸
            int:0

        krg """
            test
                int  . help text . = 123
            """ argv:[] ▸
            int:123

        krg """
            test
                int  . help text . = 123
            """ argv:'-i 666.777'.split ' ' ▸
            int:666.777
        
        krg """
            test
                int  . = 123
            """ argv:'-i 666'.split ' ' ▸
            int:666
        
        krg """
            test
                int  . = 123
            """ argv:'--int 777'.split ' ' ▸
            int:777

        krg """
            test
                int  . = 123m
            """ argv:'--int 777'.split ' ' ▸
            int:'777'

        krg """
            test
                int  . = 123
            """ argv:'--int 777s'.split ' ' ▸
            int:777
        
    # 0000000     0000000    0000000   000      
    # 000   000  000   000  000   000  000      
    # 0000000    000   000  000   000  000      
    # 000   000  000   000  000   000  000      
    # 0000000     0000000    0000000   0000000  
    
    ▸ bool
        
        krg """
            test
                bool    . = true
            """ argv:[] ▸
            bool:true
        
        krg """
            test
                bool    . = false
            """ argv:[] ▸
            bool:false

        krg """
            test
                bool  . help text . = true
            """ argv:[] ▸
            bool:true

        krg """
            test
                bool  . = false
            """ argv:['-b'] ▸
            bool:true
        
        krg """
            test
                bool  . = false
            """ argv:['--bool'] ▸
            bool:true
        
        
    # 000   000   0000000         0000000    00000000  00000000   0000000   000   000  000      000000000  
    # 0000  000  000   000        000   000  000       000       000   000  000   000  000         000     
    # 000 0 000  000   000        000   000  0000000   000000    000000000  000   000  000         000     
    # 000  0000  000   000        000   000  000       000       000   000  000   000  000         000     
    # 000   000   0000000         0000000    00000000  000       000   000   0000000   0000000     000     
    
    ▸ no default
        
        krg """
            test
                nodefault  . ? has no default
            """ argv:[] ▸
            {}
        
        krg """
            test
                lonelyarg
            """ argv:[] ▸
            {}

        krg """
            test
                nodefault   . ? has no default
            """ argv:['--nodefault' 'test' '-n' 'foo'] ▸
            nodefault:'foo'
        
        krg """
            test
                nodefault   . ? has no default  
            """ argv:['-n' '123'] ▸
            nodefault:'123'

        krg """
            test
                nodefault   . ? has no default  
            """ argv:['-n' 'true'] ▸
            nodefault:'true'

    # 000   000   0000000          0000000  000   000   0000000   00000000   000000000  
    # 0000  000  000   000        000       000   000  000   000  000   000     000     
    # 000 0 000  000   000        0000000   000000000  000   000  0000000       000     
    # 000  0000  000   000             000  000   000  000   000  000   000     000     
    # 000   000   0000000         0000000   000   000   0000000   000   000     000     
    
    ▸ no short
        
        krg """
            test
                noshort  . = false . - -
            """ argv:['-n'] ▸ (a) -> a.noshort == false
        
        krg """
            test
                noshort  . = false . - -
            """ argv:['--noshort'] ▸ (a) -> a.noshort == true
            
        krg """
            test
                noshort  . = true . - -
            """ argv:['-n'] ▸ (a) -> a.noshort == true
            
        krg """
            test
                noshort  . = true . - -
            """ argv:['--noshort'] ▸ (a) -> a.noshort == false

        
    # 00000000    0000000   00000000    0000000   00     00   0000000  
    # 000   000  000   000  000   000  000   000  000   000  000       
    # 00000000   000000000  0000000    000000000  000000000  0000000   
    # 000        000   000  000   000  000   000  000 0 000       000  
    # 000        000   000  000   000  000   000  000   000  0000000   
    
    ▸ params
        
        krg """
            test
                params  . **
            """ argv:[] ▸
            {params:[]}

        krg """
            test
                params  . **
            """ argv:['a' 'b' '3'] ▸
            params: ['a' 'b' '3']
        
        krg """
            test
                param  . *
            """ argv:[] ▸
            {}

        krg """
            test
                param  . *
            """ argv:['x'] ▸
            param:'x'
        
        krg """
            test
                params  . ? multiple params . **
            """ argv:['a' 'b' '3'] ▸
            params: ['a' 'b' '3']

        krg """
            test
                param  . ? single param . *
            """ argv:['a' 'b' '3'] ▸
            param: '3'

        krg """
            test
                param  . *
            """ argv:['a' 'b' '3'] ▸
            param: '3'
                
    #  0000000   0000000    0000000  00000000  
    # 000       000   000  000       000       
    # 000       000000000  0000000   0000000   
    # 000       000   000       000  000       
    #  0000000  000   000  0000000   00000000  
    
    ▸ case
        
        krg """
            test
                Upper  . = false
            """ argv:[] ▸
            Upper:false

        krg """
            test
                Upper  . = false
            """ argv:['-U'] ▸
            Upper:true

        krg """
            test
                upperCaseU  . = false . - U
            """ argv:['-U'] ▸
            upperCaseU:true

        krg """
            test
                dev-tools  . = false . - D
            """ argv:['-D'] ▸
            'dev-tools':true
                
    # 000   000  00000000  00000000    0000000  000   0000000   000   000  
    # 000   000  000       000   000  000       000  000   000  0000  000  
    #  000 000   0000000   0000000    0000000   000  000   000  000 0 000  
    #    000     000       000   000       000  000  000   000  000  0000  
    #     0      00000000  000   000  0000000   000   0000000   000   000  
    
    ▸ version
        
        krg """
            test
                arg  . = false
            version  0.1.2
            """ argv:['-V'], returnLog:true ▸
            '0.1.2'

        krg """
            test
                arg  . = false
            """ argv:['-V'] ▸
            arg:false, __ignored:['-V']
        
        krg """
            test
                Volt  . = should override -V for version
            version  2.3.4
            """ argv:['-V' '0'], returnLog:true ▸
            Volt:'0'
        
    # 000   000  00000000  000      00000000   
    # 000   000  000       000      000   000  
    # 000000000  0000000   000      00000000   
    # 000   000  000       000      000        
    # 000   000  00000000  0000000  000        
    
    ▸ help
        
        kolor.strip krg """
            test
                arg  . = false
            """ argv:['-h'], returnLog:true ▸ (a) -> 
            'usage:  test' in a
                            
        kolor.strip krg """
            test
                arg  . = false
        """ argv:['--help'], returnLog:true ▸ (a) -> 
            'usage:  test' in a
        
        kolor.strip krg """
            shortconfig
                arg     info about arg  = false
                noInfo                  = true  
                noShort                 = true -
                noLong                  = true --
                newLong                 = true --long
                newShort                = true -s
                newLongShort            = true -S --LS
        """ argv:['--help'], returnLog:true ▸ (a) -> 
            'usage:  shortconfig' in a
        
        
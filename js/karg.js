(function() {
  /*
  000   000   0000000   00000000    0000000 
  000  000   000   000  000   000  000      
  0000000    000000000  0000000    000  0000
  000  000   000   000  000   000  000   000
  000   000  000   000  000   000   0000000 
  */
  /*
  00000000  00000000   00000000    0000000   00000000 
  000       000   000  000   000  000   000  000   000
  0000000   0000000    0000000    000   000  0000000  
  000       000   000  000   000  000   000  000   000
  00000000  000   000  000   000   0000000   000   000
  */
  /*
  00000000  000   000  00000000    0000000   000   000  0000000  
  000        000 000   000   000  000   000  0000  000  000   000
  0000000     00000    00000000   000000000  000 0 000  000   000
  000        000 000   000        000   000  000  0000  000   000
  00000000  000   000  000        000   000  000   000  0000000  
  */
  var clone, colors, error, expand, isEmpty, isString, log, noon, padEnd, parse, size, values,
    indexOf = [].indexOf;

  log = console.log;

  noon = require('noon');

  colors = require('colors');

  isEmpty = require('lodash.isempty');

  padEnd = require('lodash.padend');

  size = require('lodash.size');

  values = require('lodash.values');

  isString = require('lodash.isstring');

  clone = require('lodash.clone');

  expand = function(l) {
    var a, j, len, match;
    for (j = 0, len = l.length; j < len; j++) {
      a = l[j];
      if (match = /^\-(\w\w+)$/.exec(a)) {
        a = match[1].split('').map(function(i) {
          return '-' + i;
        });
        a.unshift(l.indexOf(match.input), 1);
        l.splice.apply(l, a);
        return expand(l);
      }
    }
    return l;
  };

  error = function(msg) {
    var s;
    s = "[".dim.red + "ERROR".bold.dim.red + "] ".dim.red;
    s += msg.trim().split('\n').join("\n        ").red;
    return log(s);
  };

  /*
  00000000    0000000   00000000    0000000  00000000
  000   000  000   000  000   000  000       000     
  00000000   000000000  0000000    0000000   0000000 
  000        000   000  000   000       000  000     
  000        000   000  000   000  0000000   00000000
  */
  // options: 
  //     dontExit:    don't exit process on -V/--version or -h/--help  (returns undefined instead)
  parse = function(config, options = {}) {
    /*
    000   000  00000000  000      00000000 
    000   000  000       000      000   000
    000000000  0000000   000      00000000 
    000   000  000       000      000      
    000   000  00000000  0000000  000      
    */
    /*
     0000000   00000000   000000000  000   0000000   000   000   0000000
    000   000  000   000     000     000  000   000  0000  000  000     
    000   000  00000000      000     000  000   000  000 0 000  0000000 
    000   000  000           000     000  000   000  000  0000       000
     0000000   000           000     000   0000000   000   000  0000000 
    */
    var arg, df, expandedArgs, help, helpText, k, lng, maxArgLength, maxHelpLength, name, optionsText, param, paramList, ref, ref1, result, short, sht, v, version;
    if (isString(config)) {
      config = noon.parse(config);
    } else {
      config = clone(config);
    }
    name = Object.keys(config)[0];
    result = {}; // the object created from the provided arguments and the configuration
    help = {}; // maps shortcut keys to help texts
    short = {}; // maps shortcut keys to long key names
    param = ''; // name of non-option parameters
    paramList = false;
    ref = clone(config[name]);
    for (k in ref) {
      v = ref[k];
      if (0 <= k.indexOf(' ')) {
        error(`wrong karg setup: ${"keys can't contain spaces!".bold}\nbroken key: ${k.bold.yellow}`);
        process.exit(1);
      }
      if (v['='] != null) {
        result[k] = v['='];
      }
      sht = (v['-'] != null) && v['-'] || k[0];
      if (k !== k.toLowerCase()) {
        delete config[name][k];
        k = k.toLowerCase();
        config[name][k] = v;
      }
      if (indexOf.call(Object.keys(v), '*') >= 0) {
        param = k;
      } else if (indexOf.call(Object.keys(v), '**') >= 0) {
        param = k;
        paramList = true;
        result[param] = [];
      } else {
        short[sht] = k;
        help[sht] = v['?'];
      }
    }
    optionsText = "";
    maxArgLength = 0;
    maxHelpLength = 0;
    for (sht in short) {
      lng = short[sht];
      if (help[sht] != null) {
        maxArgLength = Math.max(maxArgLength, sht.length + lng.length);
        maxHelpLength = Math.max(maxHelpLength, help[sht].strip.length);
      }
    }
    for (sht in short) {
      lng = short[sht];
      if (help[sht] != null) {
        df = (function() {
          switch (result[lng]) {
            case false:
              return '✘'.red.dim;
            case true:
              return '✔'.green.bold;
            default:
              return result[lng];
          }
        })();
        optionsText += '\n';
        optionsText += `    ${'-'.gray}${sht}${', --'.gray}${lng}`;
        optionsText += `    ${padEnd('', Math.max(0, maxArgLength - sht.length - lng.length))} ${help[sht]}`.gray.bold;
        if (df != null) {
          optionsText += `    ${padEnd('', Math.max(0, maxHelpLength - help[sht].strip.length))} ${df}`.magenta;
        }
      }
    }
    helpText = `\n${'usage:'.gray}  ${name.bold} `;
    if (1 < size(short)) {
      helpText += `${'['.gray}${'options'.bold.gray}${']'.gray} `;
    }
    helpText += `${'['.gray}${param.bold.yellow}${paramList && ' ... ]'.gray || ']'.gray}`;
    helpText += '\n';
    if ((ref1 = config[name][param]) != null ? ref1['?'] : void 0) {
      helpText += `\n${padEnd('        ' + param, maxArgLength + 9)} ${config[name][param]['?'].gray}`.yellow.bold;
      if ((config[name][param]['='] != null) && !paramList) {
        helpText += `  ${padEnd('', Math.max(0, maxHelpLength - config[name][param]['?'].strip.length))} ${config[name][param]['=']}`.magenta;
      }
      helpText += '\n';
    }
    if (optionsText.length) {
      helpText += "\noptions:\n".gray;
      helpText += optionsText;
      helpText += '\n\n';
    }
    short['h'] = 'help';
    if (config.version != null) {
      version = config.version;
      delete config.version;
      short['V'] = 'version';
    }
    delete config[name];
    if (!isEmpty(config)) {
      helpText += noon.stringify(config, {
        maxalign: 16,
        colors: {
          key: colors.gray,
          string: colors.white
        }
      });
      helpText += '\n';
    }
    /*
    00000000   00000000   0000000  000   000  000      000000000
    000   000  000       000       000   000  000         000   
    0000000    0000000   0000000   000   000  000         000   
    000   000  000            000  000   000  000         000   
    000   000  00000000  0000000    0000000   0000000     000   
    */
    if (options.ignoreArgs == null) {
      options.ignoreArgs = 2;
    }
    expandedArgs = expand(process.argv.slice(options.ignoreArgs));
    while (arg = expandedArgs.shift()) {
      if (arg.substr(0, 2) === '--') {
        arg = arg.substr(2);
      } else if (arg[0] === '-') {
        arg = short[arg.substr(1)];
      } else {
        if (paramList) {
          result[param].push(arg);
        } else {
          result[param] = arg;
        }
        continue;
      }
      if (arg === 'help') {
        log(helpText);
        if (options.dontExit) {
          return;
        }
        process.exit();
      } else if (arg === 'version' && (version != null)) {
        log(version);
        if (options.dontExit) {
          return;
        }
        process.exit();
      }
      if (result[arg] === false || result[arg] === true) {
        result[arg] = !result[arg];
      } else if (!isNaN(parseInt(result[arg]))) {
        result[arg] = parseInt(expandedArgs.shift());
      } else if (indexOf.call(values(short), arg) >= 0) {
        result[arg] = expandedArgs.shift();
      } else {
        if (paramList) {
          result[param].push(arg);
        } else {
          result[param] = arg;
        }
      }
    }
    return result;
  };

  module.exports = parse;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:/Users/kodi/s/karg/coffee/karg.coffee
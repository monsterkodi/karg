// koffee 0.56.0

/*
000   000   0000000   00000000    0000000 
000  000   000   000  000   000  000      
0000000    000000000  0000000    000  0000
000  000   000   000  000   000  000   000
000   000  000   000  000   000   0000000
 */
var clone, error, expand, isEmpty, isString, padEnd, parse, size, values,
    indexOf = [].indexOf;

isEmpty = require('lodash.isempty');

padEnd = require('lodash.padend');

size = require('lodash.size');

values = require('lodash.values');

isString = require('lodash.isstring');

clone = require('lodash.clone');

require('klor').kolor.globalize();


/*
00000000  000   000  00000000    0000000   000   000  0000000  
000        000 000   000   000  000   000  0000  000  000   000
0000000     00000    00000000   000000000  000 0 000  000   000
000        000 000   000        000   000  000  0000  000   000
00000000  000   000  000        000   000  000   000  0000000
 */

expand = function(l) {
    var a, j, len, match;
    for (j = 0, len = l.length; j < len; j++) {
        a = l[j];
        if (match = /^\-(\w\w+)$/.exec(a)) {
            a = match[1].split('').map(function(i) {
                return '-' + i;
            });
            a.unshift(l.indexOf(match.input), 1);
            l.splice.apply(l, a);
            return expand(l);
        }
    }
    return l;
};


/*
00000000  00000000   00000000    0000000   00000000 
000       000   000  000   000  000   000  000   000
0000000   0000000    0000000    000   000  0000000  
000       000   000  000   000  000   000  000   000
00000000  000   000  000   000   0000000   000   000
 */

error = function(msg) {
    var s;
    s = dim(red("[" + bold("ERROR") + "] "));
    s += red(msg.trim().split('\n').join("\n        "));
    return console.log(s);
};


/*
00000000    0000000   00000000    0000000  00000000
000   000  000   000  000   000  000       000     
00000000   000000000  0000000    0000000   0000000 
000        000   000  000   000       000  000     
000        000   000  000   000  0000000   00000000
 */

parse = function(config, options) {
    var addIgnored, addParam, addParamOrIgnore, arg, argv, df, expandedArgs, help, helpText, k, lng, maxArgLength, maxHelpLength, name, noon, optionsText, param, paramList, ref, ref1, result, short, sht, v, version;
    if (options == null) {
        options = {};
    }
    if (isString(config)) {
        noon = require('noon');
        config = noon.parse(config);
    } else {
        config = clone(config);
    }
    name = Object.keys(config)[0];
    result = {};
    help = {};
    short = {};
    param = '';
    paramList = false;
    ref = config[name];
    for (k in ref) {
        v = ref[k];
        if (0 <= k.indexOf(' ')) {
            console.error("wrong karg setup: " + (bold("keys can't contain spaces!")) + "\nbroken key: " + (bold(yellow(k))));
            process.exit(1);
        }
        if (v['='] != null) {
            result[k] = v['='];
        }
        sht = (v['-'] != null) && v['-'] || k[0];
        if (Array.isArray(v)) {
            if (indexOf.call(v, '*') >= 0) {
                param = k;
            } else if (indexOf.call(v, '**') >= 0) {
                param = k;
                paramList = true;
                result[param] = [];
            } else {
                short[sht] = k;
            }
        } else {
            if (indexOf.call(Object.keys(v), '*') >= 0) {
                param = k;
            } else if (indexOf.call(Object.keys(v), '**') >= 0) {
                param = k;
                paramList = true;
                result[param] = [];
            } else {
                short[sht] = k;
                help[sht] = v['?'];
            }
        }
    }

    /*
     0000000   00000000   000000000  000   0000000   000   000   0000000
    000   000  000   000     000     000  000   000  0000  000  000     
    000   000  00000000      000     000  000   000  000 0 000  0000000 
    000   000  000           000     000  000   000  000  0000       000
     0000000   000           000     000   0000000   000   000  0000000
     */
    optionsText = "";
    maxArgLength = 0;
    maxHelpLength = 0;
    for (sht in short) {
        lng = short[sht];
        if (help[sht] != null) {
            maxArgLength = Math.max(maxArgLength, sht.length + lng.length);
            maxHelpLength = Math.max(maxHelpLength, strip(help[sht]).length);
        }
    }
    for (sht in short) {
        lng = short[sht];
        if (help[sht] != null) {
            df = (function() {
                switch (result[lng]) {
                    case false:
                        return red(dim('✘'));
                    case true:
                        return green(bold('✔'));
                    default:
                        return result[lng];
                }
            })();
            optionsText += '\n';
            optionsText += "    " + (gray('-')) + sht + (gray(', --')) + lng;
            optionsText += gray(bold("    " + (padEnd('', Math.max(0, maxArgLength - sht.length - lng.length))) + " " + help[sht]));
            if (df != null) {
                optionsText += magenta("    " + (padEnd('', Math.max(0, maxHelpLength - strip(help[sht]).length))) + " " + df);
            }
        }
    }

    /*
    000   000  00000000  000      00000000 
    000   000  000       000      000   000
    000000000  0000000   000      00000000 
    000   000  000       000      000      
    000   000  00000000  0000000  000
     */
    helpText = "\n" + (gray('usage:')) + "  " + (bold(name)) + " ";
    if (1 < size(short)) {
        helpText += "" + (gray('[')) + (bold(gray('options'))) + (gray(']')) + " ";
    }
    helpText += "" + (gray('[')) + (bold(yellow(param))) + (paramList && gray(' ... ]') || gray(']'));
    helpText += '\n';
    if ((ref1 = config[name][param]) != null ? ref1['?'] : void 0) {
        helpText += yellow(bold("\n" + (padEnd('        ' + param, maxArgLength + 9)) + " " + (gray(config[name][param]['?']))));
        if ((config[name][param]['='] != null) && !paramList) {
            helpText += magenta("  " + (padEnd('', Math.max(0, maxHelpLength - strip(config[name][param]['?']).length))) + " " + config[name][param]['=']);
        }
        helpText += '\n';
    }
    if (optionsText.length) {
        helpText += gray("\noptions:\n");
        helpText += optionsText;
        helpText += '\n\n';
    }
    if (short['h'] != null) {
        short['h'];
    } else {
        short['h'] = 'help';
    }
    if (config.version != null) {
        version = config.version;
        delete config.version;
        if (short['V'] != null) {
            short['V'];
        } else {
            short['V'] = 'version';
        }
    }
    delete config[name];
    if (!isEmpty(config)) {
        helpText += noon.stringify(config, {
            maxalign: 16,
            colors: {
                key: gray,
                string: white
            }
        });
        helpText += '\n';
    }

    /*
    00000000   00000000   0000000  000   000  000      000000000
    000   000  000       000       000   000  000         000   
    0000000    0000000   0000000   000   000  000         000   
    000   000  000            000  000   000  000         000   
    000   000  00000000  0000000    0000000   0000000     000
     */
    if (options.ignoreArgs != null) {
        options.ignoreArgs;
    } else {
        options.ignoreArgs = 2;
    }
    if (options.argv) {
        argv = options.argv;
    } else {
        argv = process.argv.slice(options.ignoreArgs);
    }
    expandedArgs = expand(argv);
    addParam = function(arg) {
        if (paramList) {
            return result[param].push(arg);
        } else {
            return result[param] = arg;
        }
    };
    addIgnored = function(arg) {
        if (!result['__ignored']) {
            result['__ignored'] = [];
        }
        return result['__ignored'].push(arg);
    };
    addParamOrIgnore = function(arg) {
        if (param) {
            return addParam(arg);
        } else {
            return addIgnored(arg);
        }
    };
    while (arg = expandedArgs.shift()) {
        if (arg.substr(0, 2) === '--') {
            arg = arg.substr(2);
        } else if (arg[0] === '-') {
            if (!short[arg.substr(1)]) {
                addIgnored(arg);
                continue;
            }
            arg = short[arg.substr(1)];
        } else {
            addParamOrIgnore(arg);
            continue;
        }
        if (arg === 'help') {
            if (options.returnLog) {
                return helpText;
            }
            console.log(helpText);
            if (options.dontExit) {
                return;
            }
            process.exit();
        } else if (arg === 'version' && (version != null)) {
            if (options.returnLog) {
                return version;
            }
            console.log(version);
            if (options.dontExit) {
                return;
            }
            process.exit();
        }
        if (result[arg] === false || result[arg] === true) {
            result[arg] = !result[arg];
        } else if (!isNaN(parseFloat(result[arg]))) {
            result[arg] = parseFloat(expandedArgs.shift());
        } else if (indexOf.call(values(short), arg) >= 0) {
            result[arg] = expandedArgs.shift();
        } else {
            addParamOrIgnore(arg);
        }
    }
    return result;
};

module.exports = parse;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/karg.coffee
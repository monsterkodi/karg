(function() {
  /*
  000   000   0000000   00000000    0000000 
  000  000   000   000  000   000  000      
  0000000    000000000  0000000    000  0000
  000  000   000   000  000   000  000   000
  000   000  000   000  000   000   0000000 
  */
  /*
  00000000  00000000   00000000    0000000   00000000 
  000       000   000  000   000  000   000  000   000
  0000000   0000000    0000000    000   000  0000000  
  000       000   000  000   000  000   000  000   000
  00000000  000   000  000   000   0000000   000   000
  */
  /*
  00000000  000   000  00000000    0000000   000   000  0000000  
  000        000 000   000   000  000   000  0000  000  000   000
  0000000     00000    00000000   000000000  000 0 000  000   000
  000        000 000   000        000   000  000  0000  000   000
  00000000  000   000  000        000   000  000   000  0000000  
  */
  var clone, colors, error, expand, isEmpty, isString, log, noon, padEnd, parse, size, values,
    indexOf = [].indexOf;

  log = console.log;

  noon = require('noon');

  colors = require('colors');

  isEmpty = require('lodash.isempty');

  padEnd = require('lodash.padend');

  size = require('lodash.size');

  values = require('lodash.values');

  isString = require('lodash.isstring');

  clone = require('lodash.clone');

  expand = function(l) {
    var a, j, len, match;
    for (j = 0, len = l.length; j < len; j++) {
      a = l[j];
      if (match = /^\-(\w\w+)$/.exec(a)) {
        a = match[1].split('').map(function(i) {
          return '-' + i;
        });
        a.unshift(l.indexOf(match.input), 1);
        l.splice.apply(l, a);
        return expand(l);
      }
    }
    return l;
  };

  error = function(msg) {
    var s;
    s = "[".dim.red + "ERROR".bold.dim.red + "] ".dim.red;
    s += msg.trim().split('\n').join("\n        ").red;
    return log(s);
  };

  /*
  00000000    0000000   00000000    0000000  00000000
  000   000  000   000  000   000  000       000     
  00000000   000000000  0000000    0000000   0000000 
  000        000   000  000   000       000  000     
  000        000   000  000   000  0000000   00000000
  */
  // options: 
  //     ignoreArgs:  number of leading process.argv items to ignore (default=2)
  //     argv:        list of string arguments to use instead of process.argv
  //     dontExit:    don't exit process on -V/--version or -h/--help  (returns undefined instead)
  //     returnLog:   help/version output is returned instead of logged (implies dontExit)
  parse = function(config, options = {}) {
    /*
    000   000  00000000  000      00000000 
    000   000  000       000      000   000
    000000000  0000000   000      00000000 
    000   000  000       000      000      
    000   000  00000000  0000000  000      
    */
    /*
     0000000   00000000   000000000  000   0000000   000   000   0000000
    000   000  000   000     000     000  000   000  0000  000  000     
    000   000  00000000      000     000  000   000  000 0 000  0000000 
    000   000  000           000     000  000   000  000  0000       000
     0000000   000           000     000   0000000   000   000  0000000 
    */
    var addIgnored, addParam, addParamOrIgnore, arg, argv, df, expandedArgs, help, helpText, k, lng, maxArgLength, maxHelpLength, name, optionsText, param, paramList, ref, ref1, result, short, sht, v, version;
    if (isString(config)) {
      config = noon.parse(config);
    } else {
      config = clone(config);
    }
    name = Object.keys(config)[0];
    result = {}; // the object created from the provided arguments and the configuration
    help = {}; // maps shortcut keys to help texts
    short = {}; // maps shortcut keys to long key names
    param = ''; // name of non-option parameters
    paramList = false;
    ref = config[name];
    for (k in ref) {
      v = ref[k];
      if (0 <= k.indexOf(' ')) {
        error(`wrong karg setup: ${"keys can't contain spaces!".bold}\nbroken key: ${k.bold.yellow}`);
        process.exit(1);
      }
      if (v['='] != null) {
        result[k] = v['='];
      }
      sht = (v['-'] != null) && v['-'] || k[0];
      if (Array.isArray(v)) {
        if (indexOf.call(v, '*') >= 0) {
          param = k;
        } else if (indexOf.call(v, '**') >= 0) {
          param = k;
          paramList = true;
          result[param] = [];
        } else {
          short[sht] = k;
        }
      } else {
        if (indexOf.call(Object.keys(v), '*') >= 0) {
          param = k;
        } else if (indexOf.call(Object.keys(v), '**') >= 0) {
          param = k;
          paramList = true;
          result[param] = [];
        } else {
          short[sht] = k;
          help[sht] = v['?'];
        }
      }
    }
    optionsText = "";
    maxArgLength = 0;
    maxHelpLength = 0;
    for (sht in short) {
      lng = short[sht];
      if (help[sht] != null) {
        maxArgLength = Math.max(maxArgLength, sht.length + lng.length);
        maxHelpLength = Math.max(maxHelpLength, help[sht].strip.length);
      }
    }
    for (sht in short) {
      lng = short[sht];
      if (help[sht] != null) {
        df = (function() {
          switch (result[lng]) {
            case false:
              return '✘'.red.dim;
            case true:
              return '✔'.green.bold;
            default:
              return result[lng];
          }
        })();
        optionsText += '\n';
        optionsText += `    ${'-'.gray}${sht}${', --'.gray}${lng}`;
        optionsText += `    ${padEnd('', Math.max(0, maxArgLength - sht.length - lng.length))} ${help[sht]}`.gray.bold;
        if (df != null) {
          optionsText += `    ${padEnd('', Math.max(0, maxHelpLength - help[sht].strip.length))} ${df}`.magenta;
        }
      }
    }
    helpText = `\n${'usage:'.gray}  ${name.bold} `;
    if (1 < size(short)) {
      helpText += `${'['.gray}${'options'.bold.gray}${']'.gray} `;
    }
    helpText += `${'['.gray}${param.bold.yellow}${paramList && ' ... ]'.gray || ']'.gray}`;
    helpText += '\n';
    if ((ref1 = config[name][param]) != null ? ref1['?'] : void 0) {
      helpText += `\n${padEnd('        ' + param, maxArgLength + 9)} ${config[name][param]['?'].gray}`.yellow.bold;
      if ((config[name][param]['='] != null) && !paramList) {
        helpText += `  ${padEnd('', Math.max(0, maxHelpLength - config[name][param]['?'].strip.length))} ${config[name][param]['=']}`.magenta;
      }
      helpText += '\n';
    }
    if (optionsText.length) {
      helpText += "\noptions:\n".gray;
      helpText += optionsText;
      helpText += '\n\n';
    }
    if (short['h'] == null) {
      short['h'] = 'help';
    }
    if (config.version != null) {
      version = config.version;
      delete config.version;
      if (short['V'] == null) {
        short['V'] = 'version';
      }
    }
    delete config[name];
    if (!isEmpty(config)) {
      helpText += noon.stringify(config, {
        maxalign: 16,
        colors: {
          key: colors.gray,
          string: colors.white
        }
      });
      helpText += '\n';
    }
    /*
    00000000   00000000   0000000  000   000  000      000000000
    000   000  000       000       000   000  000         000   
    0000000    0000000   0000000   000   000  000         000   
    000   000  000            000  000   000  000         000   
    000   000  00000000  0000000    0000000   0000000     000   
    */
    if (options.ignoreArgs == null) {
      options.ignoreArgs = 2;
    }
    if (options.argv) {
      argv = options.argv;
    } else {
      argv = process.argv.slice(options.ignoreArgs);
    }
    expandedArgs = expand(argv);
    addParam = function(arg) {
      if (paramList) {
        return result[param].push(arg);
      } else {
        return result[param] = arg;
      }
    };
    addIgnored = function(arg) {
      if (!result['__ignored']) {
        result['__ignored'] = [];
      }
      return result['__ignored'].push(arg);
    };
    addParamOrIgnore = function(arg) {
      if (param) {
        return addParam(arg);
      } else {
        return addIgnored(arg);
      }
    };
    while (arg = expandedArgs.shift()) {
      if (arg.substr(0, 2) === '--') {
        arg = arg.substr(2);
      } else if (arg[0] === '-') {
        if (!short[arg.substr(1)]) {
          addIgnored(arg);
          continue;
        }
        arg = short[arg.substr(1)];
      } else {
        addParamOrIgnore(arg);
        continue;
      }
      if (arg === 'help') {
        if (options.returnLog) {
          return helpText;
        }
        log(helpText);
        if (options.dontExit) {
          return;
        }
        process.exit();
      } else if (arg === 'version' && (version != null)) {
        if (options.returnLog) {
          return version;
        }
        log(version);
        if (options.dontExit) {
          return;
        }
        process.exit();
      }
      if (result[arg] === false || result[arg] === true) {
        result[arg] = !result[arg];
      } else if (!isNaN(parseFloat(result[arg]))) {
        result[arg] = parseFloat(expandedArgs.shift());
      } else if (indexOf.call(values(short), arg) >= 0) {
        result[arg] = expandedArgs.shift();
      } else {
        addParamOrIgnore(arg);
      }
    }
    return result;
  };

  module.exports = parse;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FyZy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlL2thcmcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE1BQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBO0lBQUE7O0VBUUEsR0FBQSxHQUFXLE9BQU8sQ0FBQzs7RUFDbkIsSUFBQSxHQUFXLE9BQUEsQ0FBUSxNQUFSOztFQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsUUFBUjs7RUFDWCxPQUFBLEdBQVcsT0FBQSxDQUFRLGdCQUFSOztFQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsZUFBUjs7RUFDWCxJQUFBLEdBQVcsT0FBQSxDQUFRLGFBQVI7O0VBQ1gsTUFBQSxHQUFXLE9BQUEsQ0FBUSxlQUFSOztFQUNYLFFBQUEsR0FBVyxPQUFBLENBQVEsaUJBQVI7O0VBQ1gsS0FBQSxHQUFXLE9BQUEsQ0FBUSxjQUFSOztFQVVYLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxDQUFBO0FBQ0wsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQTtJQUFBLEtBQUEsbUNBQUE7O01BQ0ksSUFBRyxLQUFBLEdBQVEsYUFBYSxDQUFDLElBQWQsQ0FBbUIsQ0FBbkIsQ0FBWDtRQUNJLENBQUEsR0FBSSxLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsS0FBVCxDQUFlLEVBQWYsQ0FBa0IsQ0FBQyxHQUFuQixDQUF1QixRQUFBLENBQUMsQ0FBRCxDQUFBO2lCQUFPLEdBQUEsR0FBSTtRQUFYLENBQXZCO1FBQ0osQ0FBQyxDQUFDLE9BQUYsQ0FBVSxDQUFDLENBQUMsT0FBRixDQUFVLEtBQUssQ0FBQyxLQUFoQixDQUFWLEVBQWtDLENBQWxDO1FBQ0EsQ0FBQyxD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SSxJQUFHLE9BQU8sQ0FBQyxTQUFYO0FBQTBCLGlCQUFPLFNBQWpDOztRQUNBLEdBQUEsQ0FBSSxRQUFKO1FBQ0EsSUFBVSxPQUFPLENBQUMsUUFBbEI7QUFBQSxpQkFBQTs7UUFDQSxPQUFPLENBQUMsSUFBUixDQUFBLEVBSko7T0FBQSxNQUtLLElBQUcsR0FBQSxLQUFPLFNBQVAsSUFBcUIsaUJBQXhCO1FBQ0QsSUFBRyxPQUFPLENBQUMsU0FBWDtBQUEwQixpQkFBTyxRQUFqQzs7UUFDQSxHQUFBLENBQUksT0FBSjtRQUNBLElBQVUsT0FBTyxDQUFDLFFBQWxCO0FBQUEsaUJBQUE7O1FBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBQSxFQUpDOztNQU1MLElBQUcsTUFBTyxDQUFBLEdBQUEsQ0FBUCxLQUFlLEtBQWYsSUFBd0IsTUFBTyxDQUFBLEdBQUEsQ0FBUCxLQUFlLElBQTFDO1FBQ0ksTUFBTyxDQUFBLEdBQUEsQ0FBUCxHQUFjLENBQUksTUFBTyxDQUFBLEdBQUEsRUFEN0I7T0FBQSxNQUVLLElBQUcsQ0FBSSxLQUFBLENBQU0sVUFBQSxDQUFXLE1BQU8sQ0FBQSxHQUFBLENBQWxCLENBQU4sQ0FBUDtRQUNELE1BQU8sQ0FBQSxHQUFBLENBQVAsR0FBYyxVQUFBLENBQVcsWUFBWSxDQUFDLEtBQWIsQ0FBQSxDQUFYLEVBRGI7T0FBQSxNQUVBLElBQUcsYUFBTyxNQUFBLENBQU8sS0FBUCxDQUFQLEVBQUEsR0FBQSxNQUFIO1FBQ0QsTUFBTyxDQUFBLEdBQUEsQ0FBUCxHQUFjLFlBQVksQ0FBQyxLQUFiLENBQUEsRUFEYjtPQUFBLE1BQUE7UUFHRCxnQkFBQSxDQUFpQixHQUFqQixFQUhDOztJQTVCVDtXQWdDQTtFQWxMSTs7RUFvTFIsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUFsUGpCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCBcbjAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIFxuMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwXG4wMDAgIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwIFxuIyMjXG5cbmxvZyAgICAgID0gY29uc29sZS5sb2dcbm5vb24gICAgID0gcmVxdWlyZSAnbm9vbidcbmNvbG9ycyAgID0gcmVxdWlyZSAnY29sb3JzJ1xuaXNFbXB0eSAgPSByZXF1aXJlICdsb2Rhc2guaXNlbXB0eSdcbnBhZEVuZCAgID0gcmVxdWlyZSAnbG9kYXNoLnBhZGVuZCdcbnNpemUgICAgID0gcmVxdWlyZSAnbG9kYXNoLnNpemUnXG52YWx1ZXMgICA9IHJlcXVpcmUgJ2xvZGFzaC52YWx1ZXMnXG5pc1N0cmluZyA9IHJlcXVpcmUgJ2xvZGFzaC5pc3N0cmluZydcbmNsb25lICAgID0gcmVxdWlyZSAnbG9kYXNoLmNsb25lJ1xuXG4jIyNcbjAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuMDAwICAgICAgICAwMDAgMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwXG4wMDAwMDAwICAgICAwMDAwMCAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDBcbjAwMCAgICAgICAgMDAwIDAwMCAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG4jIyNcblxuZXhwYW5kID0gKGwpIC0+XG4gICAgZm9yIGEgaW4gbCBcbiAgICAgICAgaWYgbWF0Y2ggPSAvXlxcLShcXHdcXHcrKSQvLmV4ZWMgYVxuICAgICAgICAgICAgYSA9IG1hdGNoWzFdLnNwbGl0KCcnKS5tYXAgKGkpIC0+ICctJytpXG4gICAgICAgICAgICBhLnVuc2hpZnQgbC5pbmRleE9mKG1hdGNoLmlucHV0KSwgMVxuICAgICAgICAgICAgbC5zcGxpY2UuYXBwbHkgbCwgYVxuICAgICAgICAgICAgcmV0dXJuIGV4cGFuZCBsXG4gICAgbFxuXG4jIyNcbjAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMCBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiMjI1xuXG5lcnJvciA9IChtc2cpIC0+XG4gICAgcyA9IFwiW1wiLmRpbS5yZWQgKyBcIkVSUk9SXCIuYm9sZC5kaW0ucmVkICsgXCJdIFwiLmRpbS5yZWQgXG4gICAgcyArPSBtc2cudHJpbSgpLnNwbGl0KCdcXG4nKS5qb2luKFwiXFxuICAgICAgICBcIikucmVkXG4gICAgbG9nIHNcblxuIyMjXG4wMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgIFxuMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgXG4wMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgICBcbjAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMFxuIyMjXG5cbiMgb3B0aW9uczogXG4jICAgICBpZ25vcmVBcmdzOiAgbnVtYmVyIG9mIGxlYWRpbmcgcHJvY2Vzcy5hcmd2IGl0ZW1zIHRvIGlnbm9yZSAoZGVmYXVsdD0yKVxuIyAgICAgYXJndjogICAgICAgIGxpc3Qgb2Ygc3RyaW5nIGFyZ3VtZW50cyB0byB1c2UgaW5zdGVhZCBvZiBwcm9jZXNzLmFyZ3ZcbiMgICAgIGRvbnRFeGl0OiAgICBkb24ndCBleGl0IHByb2Nlc3Mgb24gLVYvLS12ZXJzaW9uIG9yIC1oLy0taGVscCAgKHJldHVybnMgdW5kZWZpbmVkIGluc3RlYWQpXG4jICAgICByZXR1cm5Mb2c6ICAgaGVscC92ZXJzaW9uIG91dHB1dCBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGxvZ2dlZCAoaW1wbGllcyBkb250RXhpdClcblxucGFyc2UgPSAoY29uZmlnLCBvcHRpb25zPXt9KSAtPlxuICAgIFxuICAgIGlmIGlzU3RyaW5nIGNvbmZpZ1xuICAgICAgICBjb25maWcgPSBub29uLnBhcnNlIGNvbmZpZ1xuICAgIGVsc2VcbiAgICAgICAgY29uZmlnID0gY2xvbmUgY29uZmlnXG5cbiAgICBuYW1lICAgPSBPYmplY3Qua2V5cyhjb25maWcpWzBdICMgdGhlIGFwcGxpY2F0aW9uL3NjcmlwdCBuYW1lXG4gICAgcmVzdWx0ID0ge30gIyB0aGUgb2JqZWN0IGNyZWF0ZWQgZnJvbSB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIGFuZCB0aGUgY29uZmlndXJhdGlvblxuICAgIGhlbHAgICA9IHt9ICMgbWFwcyBzaG9ydGN1dCBrZXlzIHRvIGhlbHAgdGV4dHNcbiAgICBzaG9ydCAgPSB7fSAjIG1hcHMgc2hvcnRjdXQga2V5cyB0byBsb25nIGtleSBuYW1lc1xuICAgIHBhcmFtICA9ICcnICMgbmFtZSBvZiBub24tb3B0aW9uIHBhcmFtZXRlcnNcbiAgICBwYXJhbUxpc3QgPSBmYWxzZVxuICAgIFxuICAgIGZvciBrLHYgb2YgY29uZmlnW25hbWVdXG4gICAgICAgIFxuICAgICAgICBpZiAwIDw9IGsuaW5kZXhPZiAnICdcbiAgICAgICAgICAgIGVycm9yIFwiXCJcIlxuICAgICAgICAgICAgd3Jvbmcga2FyZyBzZXR1cDogI3tcImtleXMgY2FuJ3QgY29udGFpbiBzcGFjZXMhXCIuYm9sZH1cbiAgICAgICAgICAgIGJyb2tlbiBrZXk6ICN7ay5ib2xkLnllbGxvd31cbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0IDFcbiAgICAgICAgXG4gICAgICAgIGlmIHZbJz0nXT8gdGhlbiByZXN1bHRba10gPSB2Wyc9J11cbiAgICAgICAgXG4gICAgICAgIHNodCA9IHZbJy0nXT8gYW5kIHZbJy0nXSBvciBrWzBdXG4gICAgICAgIFxuICAgICAgICBpZiBBcnJheS5pc0FycmF5IHZcbiAgICAgICAgICAgIGlmICcqJyBpbiB2XG4gICAgICAgICAgICAgICAgcGFyYW0gPSBrXG4gICAgICAgICAgICBlbHNlIGlmICcqKicgaW4gdlxuICAgICAgICAgICAgICAgIHBhcmFtID0ga1xuICAgICAgICAgICAgICAgIHBhcmFtTGlzdCA9IHRydWVcbiAgICAgICAgICAgICAgICByZXN1bHRbcGFyYW1dID0gW11cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzaG9ydFtzaHRdID0ga1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiAnKicgaW4gT2JqZWN0LmtleXMgdlxuICAgICAgICAgICAgICAgIHBhcmFtID0ga1xuICAgICAgICAgICAgZWxzZSBpZiAnKionIGluIE9iamVjdC5rZXlzIHZcbiAgICAgICAgICAgICAgICBwYXJhbSA9IGtcbiAgICAgICAgICAgICAgICBwYXJhbUxpc3QgPSB0cnVlXG4gICAgICAgICAgICAgICAgcmVzdWx0W3BhcmFtXSA9IFtdXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2hvcnRbc2h0XSA9IGtcbiAgICAgICAgICAgICAgICBoZWxwW3NodF0gPSB2Wyc/J11cblxuICAgICMjI1xuICAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwXG4gICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICBcbiAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwIFxuICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgICAgICAgMDAwXG4gICAgIDAwMDAwMDAgICAwMDAgICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCBcbiAgICAjIyNcbiAgICBcbiAgICBvcHRpb25zVGV4dCA9IFwiXCJcbiAgICBcbiAgICBtYXhBcmdMZW5ndGggPSAwXG4gICAgbWF4SGVscExlbmd0aCA9IDBcbiAgICBmb3Igc2h0LGxuZyBvZiBzaG9ydFxuICAgICAgICBpZiBoZWxwW3NodF0/XG4gICAgICAgICAgICBtYXhBcmdMZW5ndGggID0gTWF0aC5tYXgobWF4QXJnTGVuZ3RoLCBzaHQubGVuZ3RoK2xuZy5sZW5ndGgpXG4gICAgICAgICAgICBtYXhIZWxwTGVuZ3RoID0gTWF0aC5tYXgobWF4SGVscExlbmd0aCwgaGVscFtzaHRdLnN0cmlwLmxlbmd0aClcbiAgICAgICAgICAgIFxuICAgIGZvciBzaHQsbG5nIG9mIHNob3J0XG4gICAgICAgIGlmIGhlbHBbc2h0XT9cbiAgICAgICAgICAgIGRmID0gc3dpdGNoIHJlc3VsdFtsbmddXG4gICAgICAgICAgICAgICAgd2hlbiBmYWxzZSB0aGVuICfinJgnLnJlZC5kaW1cbiAgICAgICAgICAgICAgICB3aGVuIHRydWUgIHRoZW4gJ+KclCcuZ3JlZW4uYm9sZFxuICAgICAgICAgICAgICAgIGVsc2UgcmVzdWx0W2xuZ11cbiAgICAgICAgICAgIG9wdGlvbnNUZXh0ICs9ICdcXG4nXG4gICAgICAgICAgICBvcHRpb25zVGV4dCArPSBcIiAgICAjeyctJy5ncmF5fSN7c2h0fSN7JywgLS0nLmdyYXl9I3tsbmd9XCJcbiAgICAgICAgICAgIG9wdGlvbnNUZXh0ICs9IFwiICAgICN7cGFkRW5kICcnLCBNYXRoLm1heCgwLG1heEFyZ0xlbmd0aC1zaHQubGVuZ3RoLWxuZy5sZW5ndGgpfSAje2hlbHBbc2h0XX1cIi5ncmF5LmJvbGRcbiAgICAgICAgICAgIG9wdGlvbnNUZXh0ICs9IFwiICAgICN7cGFkRW5kICcnLCBNYXRoLm1heCgwLG1heEhlbHBMZW5ndGgtaGVscFtzaHRdLnN0cmlwLmxlbmd0aCl9ICN7ZGZ9XCIubWFnZW50YSBpZiBkZj9cblxuICAgICMjI1xuICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIDAwMDAwMDAwIFxuICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMFxuICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAwIFxuICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgIFxuICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIDAwMCAgICAgIFxuICAgICMjI1xuICAgIFxuICAgIGhlbHBUZXh0ICA9IFwiXFxuI3sndXNhZ2U6Jy5ncmF5fSAgI3tuYW1lLmJvbGR9IFwiXG4gICAgaGVscFRleHQgKz0gXCIjeydbJy5ncmF5fSN7J29wdGlvbnMnLmJvbGQuZ3JheX0jeyddJy5ncmF5fSBcIiBpZiAxIDwgc2l6ZSBzaG9ydFxuICAgIGhlbHBUZXh0ICs9IFwiI3snWycuZ3JheX0je3BhcmFtLmJvbGQueWVsbG93fSN7cGFyYW1MaXN0IGFuZCAoJyAuLi4gXScuZ3JheSkgb3IgKCddJy5ncmF5KX1cIlxuICAgIGhlbHBUZXh0ICs9ICdcXG4nXG4gICAgaWYgY29uZmlnW25hbWVdW3BhcmFtXT9bJz8nXVxuICAgICAgICBoZWxwVGV4dCArPSBcIlxcbiN7cGFkRW5kICcgICAgICAgICcrcGFyYW0sIG1heEFyZ0xlbmd0aCs5fSAje2NvbmZpZ1tuYW1lXVtwYXJhbV1bJz8nXS5ncmF5fVwiLnllbGxvdy5ib2xkXG4gICAgICAgIGhlbHBUZXh0ICs9IFwiICAje3BhZEVuZCAnJywgTWF0aC5tYXgoMCxtYXhIZWxwTGVuZ3RoLWNvbmZpZ1tuYW1lXVtwYXJhbV1bJz8nXS5zdHJpcC5sZW5ndGgpfSAje2NvbmZpZ1tuYW1lXVtwYXJhbV1bJz0nXX1cIi5tYWdlbnRhIGlmIGNvbmZpZ1tuYW1lXVtwYXJhbV1bJz0nXT8gYW5kIG5vdCBwYXJhbUxpc3RcbiAgICAgICAgaGVscFRleHQgKz0gJ1xcbidcbiAgICAgICAgICAgIFxuICAgIGlmIG9wdGlvbnNUZXh0Lmxlbmd0aFxuICAgICAgICBoZWxwVGV4dCArPSBcIlxcbm9wdGlvbnM6XFxuXCIuZ3JheVxuICAgICAgICBoZWxwVGV4dCArPSBvcHRpb25zVGV4dFxuICAgICAgICBoZWxwVGV4dCArPSAnXFxuXFxuJ1xuICAgIFxuICAgIHNob3J0WydoJ10gPz0gJ2hlbHAnXG4gICAgXG4gICAgaWYgY29uZmlnLnZlcnNpb24/XG4gICAgICAgIHZlcnNpb24gPSBjb25maWcudmVyc2lvblxuICAgICAgICBkZWxldGUgY29uZmlnLnZlcnNpb25cbiAgICAgICAgc2hvcnRbJ1YnXSA/PSAndmVyc2lvbidcbiAgICAgICAgXG4gICAgZGVsZXRlIGNvbmZpZ1tuYW1lXVxuICAgIGlmIG5vdCBpc0VtcHR5IGNvbmZpZ1xuICAgICAgICBoZWxwVGV4dCArPSBub29uLnN0cmluZ2lmeSBjb25maWcsIFxuICAgICAgICAgICAgbWF4YWxpZ246IDE2XG4gICAgICAgICAgICBjb2xvcnM6IFxuICAgICAgICAgICAgICAgIGtleTogICAgIGNvbG9ycy5ncmF5XG4gICAgICAgICAgICAgICAgc3RyaW5nOiAgY29sb3JzLndoaXRlXG4gICAgICAgIGhlbHBUZXh0ICs9ICdcXG4nXG4gICAgICAgIFxuICAgICMjI1xuICAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwMFxuICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMCAgIFxuICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMCAgIFxuICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMCAgIFxuICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgIFxuICAgICMjI1xuXG4gICAgb3B0aW9ucy5pZ25vcmVBcmdzID89IDJcbiAgICBcbiAgICBpZiBvcHRpb25zLmFyZ3ZcbiAgICAgICAgYXJndiA9IG9wdGlvbnMuYXJndlxuICAgIGVsc2VcbiAgICAgICAgYXJndiA9IHByb2Nlc3MuYXJndi5zbGljZSBvcHRpb25zLmlnbm9yZUFyZ3NcbiAgICAgICAgXG4gICAgZXhwYW5kZWRBcmdzID0gZXhwYW5kIGFyZ3ZcblxuICAgIGFkZFBhcmFtID0gKGFyZykgLT5cbiAgICAgICAgaWYgcGFyYW1MaXN0XG4gICAgICAgICAgICByZXN1bHRbcGFyYW1dLnB1c2ggYXJnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdFtwYXJhbV0gPSBhcmdcbiAgICAgICAgICAgIFxuICAgIGFkZElnbm9yZWQgPSAoYXJnKSAtPlxuICAgICAgICBpZiBub3QgcmVzdWx0WydfX2lnbm9yZWQnXSB0aGVuIHJlc3VsdFsnX19pZ25vcmVkJ10gPSBbXVxuICAgICAgICByZXN1bHRbJ19faWdub3JlZCddLnB1c2ggYXJnXG4gICAgICAgIFxuICAgIGFkZFBhcmFtT3JJZ25vcmUgPSAoYXJnKSAtPlxuICAgICAgICBpZiBwYXJhbVxuICAgICAgICAgICAgYWRkUGFyYW0gYXJnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFkZElnbm9yZWQgYXJnXG4gICAgXG4gICAgd2hpbGUgYXJnID0gZXhwYW5kZWRBcmdzLnNoaWZ0KClcbiAgICAgICAgICAgIFxuICAgICAgICBpZiBhcmcuc3Vic3RyKDAsMikgPT0gJy0tJ1xuICAgICAgICAgICAgYXJnID0gYXJnLnN1YnN0ciAyXG4gICAgICAgIGVsc2UgaWYgYXJnWzBdID09ICctJ1xuICAgICAgICAgICAgaWYgbm90IHNob3J0W2FyZy5zdWJzdHIgMV1cbiAgICAgICAgICAgICAgICBhZGRJZ25vcmVkIGFyZ1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICBhcmcgPSBzaG9ydFthcmcuc3Vic3RyIDFdXG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgICBhZGRQYXJhbU9ySWdub3JlIGFyZ1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIFxuICAgICAgICBpZiBhcmcgPT0gJ2hlbHAnXG4gICAgICAgICAgICBpZiBvcHRpb25zLnJldHVybkxvZyB0aGVuIHJldHVybiBoZWxwVGV4dFxuICAgICAgICAgICAgbG9nIGhlbHBUZXh0XG4gICAgICAgICAgICByZXR1cm4gaWYgb3B0aW9ucy5kb250RXhpdFxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0KClcbiAgICAgICAgZWxzZSBpZiBhcmcgPT0gJ3ZlcnNpb24nIGFuZCB2ZXJzaW9uP1xuICAgICAgICAgICAgaWYgb3B0aW9ucy5yZXR1cm5Mb2cgdGhlbiByZXR1cm4gdmVyc2lvblxuICAgICAgICAgICAgbG9nIHZlcnNpb25cbiAgICAgICAgICAgIHJldHVybiBpZiBvcHRpb25zLmRvbnRFeGl0XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoKVxuICAgICAgICAgICAgXG4gICAgICAgIGlmIHJlc3VsdFthcmddID09IGZhbHNlIG9yIHJlc3VsdFthcmddID09IHRydWVcbiAgICAgICAgICAgIHJlc3VsdFthcmddID0gbm90IHJlc3VsdFthcmddXG4gICAgICAgIGVsc2UgaWYgbm90IGlzTmFOIHBhcnNlRmxvYXQgcmVzdWx0W2FyZ11cbiAgICAgICAgICAgIHJlc3VsdFthcmddID0gcGFyc2VGbG9hdCBleHBhbmRlZEFyZ3Muc2hpZnQoKVxuICAgICAgICBlbHNlIGlmIGFyZyBpbiB2YWx1ZXMgc2hvcnRcbiAgICAgICAgICAgIHJlc3VsdFthcmddID0gZXhwYW5kZWRBcmdzLnNoaWZ0KClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYWRkUGFyYW1Pcklnbm9yZSBhcmdcbiAgICByZXN1bHRcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxuIl19
//# sourceURL=C:/Users/kodi/s/karg/coffee/karg.coffee